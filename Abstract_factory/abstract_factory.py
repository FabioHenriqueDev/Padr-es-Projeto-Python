"""
O Abstract Factory √© um padr√£o de cria√ß√£o que fornece uma interface para criar fam√≠lias de objetos relacionados ou dependentes, sem especificar suas classes concretas. Normalmente, ele utiliza um ou mais Factory Methods para instanciar esses objetos.

Uma diferen√ßa essencial entre Factory Method e Abstract Factory √© que o Factory Method utiliza heran√ßa, enquanto o Abstract Factory se baseia na composi√ß√£o.

üìå Princ√≠pio: Programe para interfaces, n√£o para implementa√ß√µes.
"""

""" Pensando em um sistema do Taxi: """

from abc import ABC, abstractclassmethod

class VeiculoLuxo(ABC):
    @abstractclassmethod
    def buscar_cliente(self) -> None: pass

class VeiculoPopular(ABC):
    @abstractclassmethod
    def buscar_cliente(self) -> None: pass


# Zona Norte:

class CarroLuxoZN(VeiculoLuxo):
    def buscar_cliente(self) -> None: 
        print('Carro de luxo ZN est√° buscando o cliente...')

class CarroPopularZN(VeiculoPopular):
    def buscar_cliente(self) -> None: 
        print('Carro popular ZN est√° buscando o cliente...')

class MotoLuxoZN(VeiculoLuxo):
      def buscar_cliente(self):
        print('Moto de luxo ZN est√° bucando cliente...')

class MotoPopularZN(VeiculoPopular):
    def buscar_cliente(self):
        print('Moto popular ZN est√° bucando cliente...')


# Zona leste:

class CarroLuxoZS(VeiculoLuxo):
    def buscar_cliente(self) -> None: 
        print('Carro de luxo ZS est√° buscando o cliente...')

class CarroPopularZS(VeiculoPopular):
    def buscar_cliente(self) -> None: 
        print('Carro popular ZS est√° buscando o cliente...')

class MotoLuxoZS(VeiculoLuxo):
      def buscar_cliente(self):
        print('Moto de luxo ZS est√° bucando cliente...')

class MotoPopularZS(VeiculoPopular):
    def buscar_cliente(self):
        print('Moto popular ZS est√° bucando cliente...')




class VeiculoFactory(ABC):
    @staticmethod
    @abstractclassmethod
    def get_carro_luxo() -> VeiculoLuxo: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        pass
    
    @staticmethod
    @abstractclassmethod
    def get_carro_popular() -> VeiculoPopular: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        pass
    
    @staticmethod
    @abstractclassmethod
    def get_moto_luxo() -> VeiculoLuxo: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        pass

    @staticmethod
    @abstractclassmethod
    def get_moto_popular() -> VeiculoPopular: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        pass




class ZonaNorteVeiculoFactory(VeiculoFactory):
    @staticmethod
    def get_carro_luxo() -> VeiculoLuxo: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return CarroLuxoZN()
    
    @staticmethod
    def get_carro_popular() -> VeiculoPopular: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return CarroPopularZN()
    
    @staticmethod
    def get_moto_luxo() -> VeiculoLuxo: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return MotoLuxoZN()

    @staticmethod
    def get_moto_popular() -> VeiculoPopular: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return MotoPopularZN()



class ZonaSulVeiculoFactory(VeiculoFactory):
    @staticmethod
    def get_carro_luxo() -> VeiculoLuxo: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return CarroLuxoZS()
    
    @staticmethod
    def get_carro_popular() -> VeiculoPopular: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return CarroPopularZS()
    
    @staticmethod
    def get_moto_luxo() -> VeiculoLuxo: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return MotoLuxoZS()

    @staticmethod
    def get_moto_popular() -> VeiculoPopular: # Esse √© um metodo fabrica, basicamente um m√©todo que cria os objetos
        return MotoPopularZS()


class Cliente:
    def busca_clientes(self):
        for factory in [ZonaNorteVeiculoFactory(), ZonaSulVeiculoFactory()]:
            carro_popular = factory.get_carro_popular()
            carro_popular.buscar_cliente()
            
            carro_luxo = factory.get_carro_luxo()
            carro_luxo.buscar_cliente()

            moto_popular = factory.get_moto_popular()
            moto_popular.buscar_cliente()

            moto_luxo = factory.get_moto_luxo()
            moto_luxo.buscar_cliente()

            print(69 * '-')





if __name__ == "__main__":
   cliente = Cliente()
   cliente.busca_clientes()

 



